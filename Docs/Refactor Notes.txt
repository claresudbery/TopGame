Golden Masters:
	Graphics-001: Only 52 sets of data (one for each possible number of cards in the loop) - didn't take account of different numbers of players.
	Graphics-001-new-props: Same as 001, but with NumTotalSegments renamed to NumCardsInLoop, and with new NumPlayersInGame added - so that it can be compared with newer versions.
	Graphics-002: (52 x 11) sets of data - for each possible number of cards, also had between 2 and 12 players.
	Graphics-003: c3bccdf17481809679462db7fd60915d30011a02: Lost track of what I was doing. Regenerated the file to make sure I hadn't changed anythign and forgotten.
	Graphics-004: c926496202b08255406564e0ef3ab5d413e4795e: Checked out previous version of code to see what golden master was generated.
	Graphics-005: f6c721b4b7aad6a9d86388c733761992643671e7: Bug fixed - GetMaxCentralAngle is now using the correct number of hands in its if statement, rather than always using 3. 
	Graphics-006: bb7e6dc979a0bb0f08613c9a9858ab6f690f25cf: After creating GoldenMasterRegion and GoldenMasterPoint - trying to work out why data has changed.
	Graphics-007: 122301258787400c24908ac3f9f5cd2f62355a8c: Bug fixed: where each new golden master pass was referencing the same underlying data, which was changing each time.
	Graphics-008: 34f6256eeb44ce5ab5354b4fa279d4678201fa6f: GraphicsPath objects now store lines and arcs instead of points
	Graphics-009: 5ec15a758a5b1e7f2e5397010bb34d546cfd266e: Added the concept of mini petal regions
	Graphics-010: d5e6b61af797148257b393ba9c783419a348c543: Added golden-master arc regions
	Graphics-011: 53a7071a4f829cf0061403c48ffe957bf97aa9a7: Added golden-master straight-edged regions
	Graphics-012: d2febc927be89761dc04d21b0b3b2a09fcc90dca: Regenerated to take account of renamed properties on golden master classes.
	Graphics-013: 30be24b2d48d566cbb2d7679fe3334aaec3ef66f: New MiniPetalRegion class, with its own Corners collection.
	Graphics-014: All regions now in one Regions collection.
	Game-001: 7535145f77fed9c8847ded8885be042d399a0bde: First attempt to store game data. Storing all moves for 2 to 12 players, using unshuffled deck each time.
	Game-002: 6d241618fcaff0daa36a943684c44c01d6f531d0: Added player start hands and num players.
	
Mongo DB:
	Links:
		Installing: https://docs.mongodb.com/getting-started/shell/tutorial/install-mongodb-on-windows/
		Using with C#: 
			https://docs.mongodb.com/ecosystem/drivers/csharp/
			https://docs.mongodb.com/getting-started/csharp/
	Local:
		Location: C:\Program Files\MongoDB\Server\3.2
		Config: C:\Program Files\MongoDB\Server\3.2\mongod.cfg
		default data directory path is c:\data\db
		To start MongoDB, run mongod.exe. In Powershell:
			cd "C:\Program Files\MongoDB\Server\3.2\bin"
			.\mongod.exe
		
To do:
	The latest tests (All_arc_regions_should_start_and_end_at_the_same_point and All_straight_edged_regions_should_start_and_end_at_the_same_point) 
		...are invalid! We are storing corners, not start / end... so the first and last will not be the same.
		But what we can do is test whether neighbouring regions share the same corners at their border - I think this is where the bug lies.
		To test this, we can:
			Create a new MiniPetalRegion class, which has two properties:
				RegionNumber
				GoldenMasterGraphicsPath
			Add RegionNumber property to the following classes:
				GoldenMasterArcRegion
				GoldenMasterStraightEdgedRegion
			Luckily regions are created in order, so we can note region number every time we add a new one, and increment a regionNumber counter at that point
			Finally we can cycle through all the regions via region number, and check their neighbouring edges.
			This way, region numbers will only be stored in golden master data - we might possibly want to put a wrapper class around Region, or this might not be necessary.
	Check we deal with the fact that angles may change depending on what share of the pack you have?
	
**************************************
WORKING OUT WHAT KIND OF DATA TO STORE FOR REGIONS
**************************************
	
**************************************
This is basically its own mini petal - it's what happens if there are only two cards
**************************************
using (GraphicsPath tempRegionPath = new GraphicsPath())
{
	// the division is the arc itself.
	tempRegionPath.AddArc(_vitalStatistics.outerArcSquare.Rectangle, (float)_vitalStatistics.arcStartAngle, (float)180);
	tempRegionPath.AddLine(_vitalStatistics.actualOuterArcStart.Point, _vitalStatistics.actualOuterArcEnd.Point);
	subRegions.Add(new Region(tempRegionPath));
	
	
**************************************
ARC REGION
**************************************
_vitalStatistics.outerPath.AddLine(_vitalStatistics.origin, _vitalStatistics.actualOuterArcStart);
_vitalStatistics.outerPath.ActualPath.AddArc(_vitalStatistics.outerArcSquare.Rectangle, (float)_vitalStatistics.arcStartAngle, (float)180);
_vitalStatistics.innerPath.AddLine(_vitalStatistics.actualInnerPetalSource, _vitalStatistics.actualInnerArcStart);
_vitalStatistics.innerPath.ActualPath.AddArc(_vitalStatistics.innerArcSquare.Rectangle, (float)_vitalStatistics.arcStartAngle, (float)180);

using (Region petalRegion = new Region(_vitalStatistics.outerPath.ActualPath))
{
	if (_vitalStatistics.innerArmLength > 0)
	{
		petalRegion.Exclude(_vitalStatistics.innerPath.ActualPath);
	}
	using (GraphicsPath tempRegionPath = new GraphicsPath())
	{
		tempRegionPath.AddLine(pointA.Point, pointB.Point);
		tempRegionPath.AddLine(pointB.Point, pointC.Point);
		tempRegionPath.AddLine(pointC.Point, pointA.Point);

		using (Region tempRegion = new Region(petalRegion.Clone().GetRegionData()))
		{
			tempRegion.Intersect(tempRegionPath);
			subRegions.Add(new Region(tempRegion.GetRegionData()));
		}

	
**************************************
TRIANGLE REGION
**************************************
using (GraphicsPath tempRegionPath = new GraphicsPath())
{
	tempRegionPath.AddLine(pointA.Point, pointB.Point);
	tempRegionPath.AddLine(pointB.Point, pointC.Point);
	tempRegionPath.AddLine(pointC.Point, pointA.Point);

	subRegions.Add(new Region(tempRegionPath));
	
	
**************************************
PARALLELOGRAM REGION
**************************************
using (GraphicsPath tempRegionPath = new GraphicsPath())
{
	tempRegionPath.AddLine(pointA.Point, pointB.Point);
	tempRegionPath.AddLine(pointB.Point, pointC.Point);
	tempRegionPath.AddLine(pointC.Point, pointD.Point);
	tempRegionPath.AddLine(pointD.Point, pointA.Point);

	subRegions.Add(new Region(tempRegionPath));

	
	
*******************************************
bug fixing
*******************************************
2 cards in loop, 2 players in game:
	latest code - at time of building object:
		AddTriangularRegion
			origin: 215,215
			startArmDivisionStarts: 201,215
			actualInnerPetalSource: 202,219
		AddTriangularRegion
			origin: 215,215
			endArmDivisionStarts: 203,222
			actualInnerPetalSource: 202,219
	original code - at time of building object:
		AddTriangularRegion
			origin: 215,215
			startArmDivisionStarts: 201,215
			actualInnerPetalSource: 202,219
		AddTriangularRegion
			origin: 215,215
			endArmDivisionStarts: 203,222
			actualInnerPetalSource: 202,219
	original code - allGoldenMasters.GoldenMasters[11].TopGameRegions[0].TopGamePoints[2].Y - later:
		2,3: 223
		2,4: 224		

	**************
	before the bug:
	**************
	"endArmDivisionEnds": {
          "Points": [
            {
              "X": 211,
              "Y": 223
            }
			...
      "TopGameRegions": [
        {
          "TopGamePoints": [
            {
              "X": 215,
              "Y": 215
            },
            {
              "X": 201,
              "Y": 215
            },
            {
              "X": 211,
              "Y": 223
            }
          ]
        },
        {
          "TopGamePoints": [
            {
              "X": 215,
              "Y": 215
            },
            {
              "X": 203,
              "Y": 222
            },
            {
              "X": 211,
              "Y": 223
            }
	**************
	after the bug:
	**************
        "endArmDivisionEnds": {
          "Points": [
            {
              "X": 211,
              "Y": 223
            }
			...
      "TopGameRegions": [
        {
          "TopGamePoints": [
            {
              "X": 215,
              "Y": 215
            },
            {
              "X": 201,
              "Y": 215
            },
            {
              "X": 202,
              "Y": 219
            }
          ]
        },
        {
          "TopGamePoints": [
            {
              "X": 215,
              "Y": 215
            },
            {
              "X": 203,
              "Y": 222
            },
            {
              "X": 202,
              "Y": 219
            }